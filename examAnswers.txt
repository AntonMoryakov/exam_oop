// 1.Создать консольное консольное приложение, 
// в котором объявить класс, содержащий конструктор, 
// принимающий 2 параметра (целочисленный и строковый).
//  Значения передаваемых в конструктор параметров записать в 
//  автоматически реализуемые свойства. Создать массив 
//  элементов созданного класса, размерность массива ввести с клавиатуры. 
// Заполнить массив произвольными значениями (в автоматическом режиме)
//  и вывести на консоль значения элементов массива. 

// using System;

// public class Test{
//     public int a{get;set;}
//     public string b{get;set;}

//     public Test(int a,string b)
//     {
//         this.a=a;
//         this.b=b;
//     }
// }


// class Program{
//     public static void Main(string[] args){
//         int size = int.Parse(Console.ReadLine());
//         Test[] test = new Test[size];
//         Random random= new Random();
//         for(int i = 0; i < size; i++){
//             test[i] = new Test(random.Next(0, 1000), "qwe" + random.Next(0, 1000).ToString());
//         }
//         foreach(Test t in test){
//             Console.WriteLine($"{t.a} {t.b}");
//         }
//     }
// }



// 2.Создать консольное приложение, в котором объявить класс с приватным методом, 
// выводящим на консоль сообщение, переданное в 
// данном методе. Вызвать приватный метод из вне 
// класса, в котором он объявлен. 

// using System.Reflection;

// public class Test{
//     private void testFunc(string mes){
//         Console.WriteLine(mes);
//     }
// }

// class Program{
//     static void Main(string[] args){
//         Test test = new Test();
//         var type = typeof(Test);
//         var method = type.GetMethod("testFunc", BindingFlags.NonPublic | BindingFlags.Instance);
//         method.Invoke(test, new object[] {"qwerty"});
//     }
// }

// Создать консольное приложение, в котором объявить метод расчета медианного 
// значения в целочисленном массиве, который передается в виде параметра в метод. 
// Размерность массива задается пользователем с клавиатуры, 
// массив заполняется случайными числами от 0 до значения размерности массива.


// class Program{

// // четный 1 2 3 4   =   (2+3)/2 = 2.5
// // нечетный 1 2 3 4 5  =  3

//     public static double median(int [] a){
//         if(a.Length % 2 == 0){
//             int firstIndex = a.Length / 2 - 1;
//             int secondIndex = firstIndex + 1;
//             return (a[firstIndex] + a[secondIndex]) / 2.0;
//         }
//         else{
//             int index = a.Length / 2;
//             return a[index];
//         }
//     }
//     public static void Main(string[] args){
//         int size = int.Parse(Console.ReadLine());
//         int [] array = new int[size];
//         Random random = new Random();
//         for(int i = 0; i < size; i++){
//             array[i] = random.Next(0, size + 1);
//         }
//         Array.Sort(array);
//         Console.WriteLine($"Медианное значение массива = {median(array)}");
//         foreach(int i in array){
//             Console.WriteLine(i);
//         }
//     }
// }


// 4.Создать консольное приложение, в котором объявить класс, 
// содержащий конструктор, принимающий 2 параметра 
// (строковый и логический (bool)). Значения передаваемых 
// в конструктор параметров записать в автоматически 
// реализуемые свойства. Объявить класс, который является 
// наследником данного класса. Создать два массива элементов 
// класса наследника, размерность массива ввести с клавиатуры 
// (размерность массивов одинаковая). Массивы заполнить 
// произвольными значениями (в автоматическом режиме) и 
// вывести на консоль информацию о том, в каком из массивов 
// чаще встречается значение false.


// using System;
// using System.Linq;

// public class TestClass
// {
//     public string S { get; set; }
//     public bool B { get; set; }

//     public TestClass(string s, bool b)
//     {
//         S = s;
//         B = b;
//     }
// }

// public class DerivedTestClass : TestClass
// {
//     public DerivedTestClass(string s, bool b) : base(s, b)
//     {
//     }
// }

// class Program
// {
//     static void Main(string[] args)
//     {
//         Console.Write("Введите размер массива: ");
//         int size = int.Parse(Console.ReadLine());

//         DerivedTestClass[] testClasses1 = new DerivedTestClass[size];
//         DerivedTestClass[] testClasses2 = new DerivedTestClass[size];
//         Random random = new Random();

//         for (int i = 0; i < size; i++)
//         {
//             bool _b = random.Next(0, 2) == 1;
//             testClasses1[i] = new DerivedTestClass(random.Next(0, 1000).ToString(), _b);
//         }
//         for (int i = 0; i < size; i++){
//             bool _b = random.Next(0, 2) == 1;
//             testClasses2[i] = new DerivedTestClass(random.Next(0, 1000).ToString(), _b);
//         }

//         int count1 = testClasses1.Count(x => x.B == false);
//         int count2 = testClasses2.Count(x => x.B == false);

//         if (count1 > count2)
//         {
//             Console.WriteLine($"Массив 1 содержит больше значений false: {count1}");
//             Console.WriteLine("first");
//         }
//         else if (count1 < count2)
//         {
//             Console.WriteLine($"Массив 2 содержит больше значений false: {count2}");
//             Console.WriteLine("second");
//         }
//         else
//         {
//             Console.WriteLine("Оба массива содержат одинаковое количество значений false");
//             Console.WriteLine("first = second");
//         }
//     }
// }



// 5.Создать консольное приложение, в котором объявить класс, 
// содержащий в себе виртуальный и абстрактный методы. Создать класс наследник от базового класса и переопределить в 
// нем виртуальный и абстрактный методы. Используя представителя класса наследника вызвать переопределенные методы.


// public abstract class FirstClass{
//     public abstract void firstFunc();
//     public virtual void secondFunc() {
//         Console.WriteLine("secondFunc in base class");
//     }
// }

// public class SecondClass : FirstClass{
//     public override void firstFunc(){
//         Console.WriteLine("firstFunc");
//     }
//     public override void secondFunc() {

//         base.secondFunc();

//         Console.WriteLine("secondFunc");
//     }
// }

// class Program{
//     public static void Main(string[] args){
//         SecondClass secondClass= new SecondClass();
//         secondClass.firstFunc();
//         secondClass.secondFunc();

//         FirstClass firstClass= new SecondClass();
//         firstClass.firstFunc();
//         firstClass.secondFunc();
//     }
// }


// 6.Создать консольное приложение, в котором объявить класс, содержащий в себе два целочисленных автоматически реализуемых 
// свойства. Внутри класса переопределить оператор «+», который позволит складывать элементы данного класса между собой. 

// using System;

// public class TestClass{
//     public TestClass(int val1, int val2)
//     {
//         Val1 = val1;
//         Val2 = val2;
//     }

//     public int Val1{ get; set; }
//     public int Val2{ get; set; }

//     public static TestClass operator+ (TestClass a,TestClass b){
//         return new TestClass (a.Val1 + b.Val1, a.Val2 + b.Val2);
//     }

//     public override string ToString (){
//         return $"Value1: {Val1}, Value2: {Val2}";
//     }
// }


// class Program{
//     static void Main(string[] args){
//         TestClass a = new TestClass(10, 20);
//         TestClass b = new TestClass(30, 40);

//         TestClass result = a + b;

//         Console.WriteLine(result);
//     }
// }


// Создать консольное приложение, 
// в котором объявить класс, использующий обобщенный 
// тип данных. Внутри класса объявить метод, 
// который выводит на консоль название типа данных, 
// который был использован в качестве обобщенного при создании элемента класса. 


// public class Test<T>{
//     T a {get; set;}

//     public Test(T a){
//         this.a = a;
//     }

//     public void display(){
//         Console.WriteLine(typeof(T).Name);
//     }
// }

// class Program{
//     public static void Main(string[] args){
//         Test<int> test= new Test<int>(10);
//         Test<string> test2= new Test<string>("qwerty");
//         test.display();
//         test2.display();
//     }
// }



// 8.Создать консольное приложение, в котором объявить класс, 
// использующий обобщенный тип данных. Дополнительно создать класс,
//  внутри которого объявить конструктор, принимающий 2 параметра 
//  (целочисленный и строковый) и записывающий значения в автоматически реализуемые свойства. 
// Наложить ограничения на обобщенный тип данных,
//  что он может принимать только описанный класс и классы наследники. 

// using System;

// // Класс, принимающий обобщенный тип данных с ограничениями
// public class Test<T> where T : DerivedTestClass
// {
//     public T Item { get; set; }

//     public Test(T item)
//     {
//         Item = item;
//     }
// }

// // Класс с конструктором, принимающим два параметра
// public class DerivedTestClass
// {
//     public int Number { get; set; }
//     public string Text { get; set; }

//     // Конструктор
//     public DerivedTestClass(int number, string text)
//     {
//         Number = number;
//         Text = text;
//     }

//     // Метод для отображения информации
//     public void Display()
//     {
//         Console.WriteLine($"Number: {Number}, Text: {Text}");
//     }
// }

// // Класс-наследник от DerivedTestClass
// public class SubDerivedTestClass : DerivedTestClass
// {
//     public SubDerivedTestClass(int number, string text) : base(number, text)
//     {
//     }
// }

// class Program
// {
//     public static void Main(string[] args)
//     {
//         // Создание объекта DerivedTestClass
//         DerivedTestClass obj1 = new DerivedTestClass(10, "Hello");
//         obj1.Display();

//         // Создание объекта SubDerivedTestClass
//         SubDerivedTestClass obj2 = new SubDerivedTestClass(20, "World");
//         obj2.Display();

//         // Создание обобщенного объекта Test с DerivedTestClass
//         Test<DerivedTestClass> test1 = new Test<DerivedTestClass>(obj1);
//         Console.WriteLine("Test with DerivedTestClass created.");

//         // Создание обобщенного объекта Test с SubDerivedTestClass
//         Test<SubDerivedTestClass> test2 = new Test<SubDerivedTestClass>(obj2);
//         Console.WriteLine("Test with SubDerivedTestClass created.");
//     }
// }



// 9.Создать консольное приложение, в котором 
// объявить два делегата для хранения ссылок на методы, обладающие следующими сигнатурами:
// a.void (int, string, bool)
// b.int (int[], double)
// Реализовать методы, подходящие, описанным выше сигнатурам. 
// Сохранить ссылки на данные в описанных делегатах. Вызвать методы используя созданные делегаты.

// public delegate void firstDelegate(int a, string s, bool b);
// public delegate int secondDelegate (int[] array, double d);



// 10.Создать консольное приложение, в котором объявить 
// интерфейс, содержащий 3 произвольных метода. Создать класс, являющийся наследником 
// объявленного интерфейса и реализующий данный интерфейс. 
// Вызвать объявленные методы используя интерфейсную ссылку. 


// public interface testInterface{
//     public void display();
//     public void display2(String name);
//     public string display3(String name);
// }

// public class Test : testInterface{
//     public string n {get; set; }

//     public void display(){
//         Console.WriteLine("qwerty");
//     }
//     public void display2(String name){
//         Console.WriteLine(name);
//     }
//     public string display3(String name){
//         return name;
//     }
// }

// class Program{
//     public static void Main(String[] args){
//         testInterface testInterface= new Test();
//         testInterface.display();
//         string n = "qwerty";
//         testInterface.display2(n);
//         Console.WriteLine(testInterface.display3(n));

//         testInterface t2 = new Test();

//     }
// }



// 11.Создать консольное приложение, в котором объявить класс, 
// внутри которого содержится событие, событие может 
// хранить ссылку на метод, обладающий заданной сигнатурой:
//  void (int). 
//  Реализовать метод, подходящий данной сигнатуре и подписать его на событие. В событии реализовать вывод на консоль 
// информации каждый раз, когда какой-либо метод 
// подписывается на данное событие или отписывается от него. Вызвать событие. 


// public delegate void EventHandler(int value);
// public class EventClass{

//     private EventHandler _Event;
//     public event EventHandler Event{
//         add{
//             Console.WriteLine("subscribe");
//             _Event += value;
//         }
//         remove{
//             Console.WriteLine("not subsribe");
//             _Event -= value;
//         }
//     }
//     public void EventTrigger(int value){
//         _Event?.Invoke(value);
//     }
// }

// class Program{
//     static void Main(string[] args){
//         void EventMethod(int value)
//         {
//             Console.WriteLine($"value = {value}");
//         }

//         EventClass eventClass= new EventClass();
//         eventClass.Event += EventMethod;
//         eventClass.EventTrigger(1);
//         eventClass.Event -= EventMethod;
//     }
// }

//12 Создать консольное приложение,
//  с помощью которого осуществить подключение 
//  к базе данных с использованием фреймворка EF Core 
//  (используя подход CodeFirst). Создать 1 класс для отображения в виде таблицы в 
// БД, обладающий 2 полями: ключ (целочисленный тип) и 
// значение (строковый тип). Создать в БД одну запись.

// using Microsoft.EntityFrameworkCore;

// public class Student{
//     public int Id{get;set;}
//     public string Value{get;set;}
// }

// public class dataContext : DbContext{
//     public DbSet<Student> Students{get;set;}
//     protected override void OnConfiguring(DbContextOptionsBuilder builder){
//         builder.UseInMemoryDatabase("TestDb");
//     }
// } 


// class Program{
//     static void Main(){
//         using (var dataContext = new dataContext()){
//             var s = new Student{Value = "это пи№№№№"};
//             dataContext.Students.Add(s);
//             dataContext.SaveChanges();

//             Console.WriteLine("Успешно");
//         }
//         using (var dataContext = new dataContext()){
            
//             //dataContext.Students.Count();

//             Console.WriteLine(dataContext.Students.Count());
//         }
//     }
// }

// 13.Создать консольное приложение, 
// с помощью которого осуществить подключение 
// к базе данных с использованием фреймворка 
// EF Core (используя подход CodeFirst). 
// Создать 1 класс для отображения в виде таблицы в БД, 
// обладающий 2 полями: ключ (целочисленный тип) и значение 
// (строковый тип). Создать в БД 1 млн записей. 
// Посчитать среднее время поиска (на примере 1000 операций поиска) 
// любой конкретной записи по ключу и по значению. 

// using Microsoft.EntityFrameworkCore;
// using System.Linq;
// using System.Diagnostics;
// using System;

// public class Student
// {
//     public int Id { get; set; }
//     public string Value { get; set; }
// }

// public class dataContext : DbContext
// {
//     public DbSet<Student> Students { get; set; }

//     protected override void OnConfiguring(DbContextOptionsBuilder builder)
//     {
//         builder.UseInMemoryDatabase("TestDb"); // In-Memory база данных
//     }
// }

// class Program
// {
//     static void Main()
//     {
//         // 1. Создание 1 млн записей
//         using (var dataContext = new dataContext())
//         {
//             for (int i = 0; i < 1_000; i++)
//             {
//                 dataContext.Students.Add(new Student { Value = "Value" + i }); // Убираем явную установку Id
//             }
//             dataContext.SaveChanges();
//         }

//         // 2. Массивы для хранения времени поиска
//         long[] countsById = new long[1000];
//         long[] countsByValue = new long[1000];

//         // 3. Поиск по значению (1000 операций)
//         using (var dataContext = new dataContext())
//         {
//             Stopwatch stopwatch = new Stopwatch();
//             for (int i = 0; i < 1000; i++)
//             {
//                 string searchValue = "Value" + i; // Ищем по значению

//                 stopwatch.Reset();
//                 stopwatch.Start();
//                 dataContext.Students.AsNoTracking().FirstOrDefault(x => x.Value == searchValue);
//                 stopwatch.Stop();

//                 countsByValue[i] = stopwatch.ElapsedMilliseconds; // Время поиска по значению
//             }
//         }

//         // 4. Поиск по ключу (1000 операций)
//         using (var dataContext = new dataContext())
//         {
//             Stopwatch stopwatch = new Stopwatch();
//             for (int i = 0; i < 1000; i++)
//             {
//                 int searchId = i + 1; // Ищем по ключу (Id)

//                 stopwatch.Reset();
//                 stopwatch.Start();
//                 dataContext.Students.AsNoTracking().FirstOrDefault(x => x.Id == searchId);
//                 stopwatch.Stop();

//                 countsById[i] = stopwatch.ElapsedMilliseconds; // Время поиска по ключу
//             }
//         }

//         // 5. Подсчет и вывод среднего времени поиска
//         Console.WriteLine("Среднее время поиска по ключу (Id): " + countsById.Average() + " мс");
//         Console.WriteLine("Среднее время поиска по значению (Value): " + countsByValue.Average() + " мс");
//     }
// }


// 15.Создать консольное приложение, в котором объявить метод 
// генерирующих массив из случайных чисел (0 - 1000). 
// Размерность массива задается случайно (10 млн – 15 млн записей). 
// Массив необходимо отсортировать по возрастанию и найти в массиве 
// количество элементов, равных Х (значение Х передается в виде параметра в метод). 
// Запустить данный метод в 10 одновременно выполняющихся потоках 
// (из пула потоков) и посчитать минимальное, максимальное и среднее время выполнения метода. 

// using System;
// using System.Diagnostics;
// using System.Linq;
// using System.Threading.Tasks;

// class Program
// {
//     static void Func(int X)
//     {
//         Random rArrayItems = new Random();
//         Random rArraySize = new Random();
//         int arraySize = rArraySize.Next(10000000, 15000001);
//         int[] array = new int[arraySize];

//         for (int i = 0; i < arraySize; i++)
//         {
//             array[i] = rArrayItems.Next(0, 1001);
//         }

//         Array.Sort(array);

//         long[] times = new long[10];
//         Parallel.For(0, 10, i =>
//         {
//             Stopwatch stopwatch = Stopwatch.StartNew();
//             int count = 0;
//             lock (array)
//             {
//                 count = array.Count(value => value == X);
//             }
//             stopwatch.Stop();
//             times[i] = stopwatch.ElapsedMilliseconds;
//         });

//         long minTime = times.Min();
//         long maxTime = times.Max();
//         double averageTime = times.Average();

//         Console.WriteLine($"{X}, \nMin: {minTime} ms, Max: {maxTime} ms, Average: {averageTime} ms");
//     }

//     public static void Main(string[] args)
//     {
//         Random random = new Random();
//         int x = random.Next(0, 1001);
//         Func(x);
//     }
// }

// 16.Создать консольное приложение, 
// в котором объявить метод генерирующих 
// массив из случайных чисел (0 - 1000). 
// Размерность массива задается случайно 
// (10 млн – 15 млн записей). Массив необходимо
//  отсортировать по возрастанию и найти в массиве 
//  количество элементов, равных Х 
//  (значение Х передается в виде параметра в метод).
//   Блок поиска количества элементов, равных Х выделить
//    в критическую секцию (доступ в эту секцию возможет 
//    только из одного потока в один момент времени). Запустить
//     данный метод в 10 одновременно выполняющихся потоках (из пула потоков) и посчитать минимальное, 
// максимальное и среднее время ожидания захода в 
// критическую секцию (ожидание равное 0 в расчетах не учитывать).  

// using System;
// using System.Diagnostics;
// using System.Linq;
// using System.Threading;

// class Program
// {
//     private static readonly object _lockObject = new object();

//     static void Func(int X)
//     {
//         Random rArrayItems = new Random();
//         Random rArraySize = new Random();
//         int arraySize = rArraySize.Next(10000000, 15000001);
//         int[] array = new int[arraySize];

//         // Заполнение массива случайными числами
//         for (int i = 0; i < arraySize; i++)
//         {
//             array[i] = rArrayItems.Next(0, 1001);
//         }

//         // Сортировка массива
//         Array.Sort(array);

//         long[] times = new long[10];
//         Parallel.For(0, 10, i =>
//         {
//             Stopwatch stopwatch = Stopwatch.StartNew();
//             lock (_lockObject)
//             {
//                 int count = array.Count(value => value == X);
//                 // Записываем время в массив после завершения критической секции
//             }
//             stopwatch.Stop();
//             times[i] = stopwatch.ElapsedMilliseconds;
//         });

//         // Вычисление минимального, максимального и среднего времени
//         long minTime = times.Min();
//         long maxTime = times.Max();
//         double averageTime = times.Where(t => t > 0).Average(); // Исключаем нулевое время

//         Console.WriteLine($"{X}, \nmin {minTime} ms, max {maxTime} ms, average {averageTime} ms");
//     }

//     public static void Main(string[] args)
//     {
//         Random random = new Random();
//         int x = random.Next(0, 1001);
//         Func(x);
//     }
// }


// 17.Создать консольное приложение, в котором объявить метод 
// (и запустить его в отдельном потоке (из пула потоков))
//  внутри которого запустить бесконечный цикл, который выводит
//   на консоль сообщение каждый раз, когда пользователь нажимает Enter. 
// Между нажатиями на Enter поток с бесконечным циклом замирает в ожидании действия пользователя. 

// using System;
// using System.Threading;

// class Program{
    
//     private static AutoResetEvent EnterEvent = new AutoResetEvent(false);
//     static void PressKey(object state){
//         while(true){
//             EnterEvent.WaitOne();
//             Console.WriteLine("Enter is pressed");
//         }
//     }
//     static void Main(string[] args){
//         ThreadPool.QueueUserWorkItem(PressKey);
//         while (true){
//             if(Console.ReadKey(true).Key == ConsoleKey.Enter){
//                 EnterEvent.Set();
//             }
//             // if(Console.ReadKey(true).Key == ConsoleKey.C){
//             //     break;
//             // }
//         }
//     }
// }